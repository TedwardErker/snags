#+TITLE:Classify Snags
#+AUTHOR: Tedward Erker
#+email: erker@wisc.edu
#+PROPERTY: header-args:R :session *R:snag* :cache no :results output :exports results :tangle yes :eval yes
#+LATEX_HEADER: \usepackage[margin=1in]{geometry}
#+LATEX_HEADER: \usepackage{natbib}
#+latex_header: \hypersetup{colorlinks=true,linkcolor=black, citecolor=black, urlcolor=black}
#+OPTIONS: toc:t h:5
------------
* libraries
#+begin_src R
library(raster)
library(stringr)
library(glcm)
library(ff)
  library(dplyr)
library(randomForest)
  library(parallel)
    library(doParallel)
#+end_src

#+RESULTS:
#+begin_example
Loading required package: bit
Attaching package bit
package:bit (c) 2008-2012 Jens Oehlschlaegel (GPL-2)
creators: bit bitwhich
coercion: as.logical as.integer as.bit as.bitwhich which
operator: ! & | xor != ==
querying: print length any all min max range sum summary
bit access: length<- [ [<- [[ [[<-
for more help type ?bit

Attaching package: ‘bit’

The following object is masked from ‘package:base’:

    xor

Attaching package ff
- getOption("fftempdir")=="/tmp/RtmpQBt49B"

- getOption("ffextension")=="ff"

- getOption("ffdrop")==TRUE

- getOption("fffinonexit")==TRUE

- getOption("ffpagesize")==65536

- getOption("ffcaching")=="mmnoflush"  -- consider "ffeachflush" if your system stalls on large writes

- getOption("ffbatchbytes")==16777216 -- consider a different value for tuning your system

- getOption("ffmaxbytes")==536870912 -- consider a different value for tuning your system


Attaching package: ‘ff’

The following objects are masked from ‘package:bit’:

    clone, clone.default, clone.list

The following objects are masked from ‘package:raster’:

    filename, is.factor, ncol<-, nrow<-

The following objects are masked from ‘package:utils’:

    write.csv, write.csv2

The following objects are masked from ‘package:base’:

    is.factor, is.ordered

Attaching package: ‘dplyr’

The following objects are masked from ‘package:raster’:

    intersect, select, union

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union
randomForest 4.6-14
Type rfNews() to see new features/changes/bug fixes.

Attaching package: ‘randomForest’

The following object is masked from ‘package:dplyr’:

    combine
Loading required package: foreach
Loading required package: iterators
#+end_example

* bits
** texture params
#+begin_src R
  band.for.texture.appendage = "_ratio.nir"
  window <- list(c(3,3), c(5,5), c(7,7))
  statistics = list("homogeneity", "contrast", "correlation", "entropy")
  shift = list(c(0,1),c(1,0),c(1,1),c(-1,1))
  texture.params <- expand.grid(band.appendage = band.for.texture.appendage,window = window, statistics = statistics, shift = shift, stringsAsFactors = F)
#+end_src

#+RESULTS:

* functions
** Feature Data Frame Related: texture, pca, segmentation, etc.
*** Save each band
#+begin_src R
  save_each_band <- function(tile.path, band.names) {
      tile <- stack(tile.path)
      names(tile) <- band.names
      tile.name <- str_sub(basename(tile.path),1,-5)
      writeRaster(tile, filename = paste0(dirname(tile.path),"/",tile.name,"_",names(tile), ".tif"), bylayer = T, format = "GTiff", overwrite = T)
  }

#+end_src

#+results:
*** Add Texture
#+begin_src R
  named.glcm <- function(tile.dir, tile.basename, band.appendage, window, statistics, shift, na_opt, na_val,...) {

      tile.path <- paste0(tile.dir, "/", tile.basename,band.appendage,".tif")
      x <- raster(tile.path)

      mnx <- NULL
      mxx <- NULL
      if(band.appendage == "_ratio.nir") {
          mnx <- 27
          mxx <-97
      }

      if (band.appendage == "_ratio.red") {
          mnx <- 27
          mxx <-97
      }


      if (statistics == "correlation") {
          texture <- glcm(x, window = window, statistics = statistics, shift = shift, na_opt = na_opt, na_val = na_val, min_x =mnx, max_x = mxx)
          texture[texture == -Inf] <- -1
          texture[texture == Inf] <- 1
          texture[is.na(texture)] <- 1
      } else {
          texture <- glcm(x, window = window, statistics = statistics, shift = shift, na_opt = na_opt, na_val = na_val, min_x = mnx, max_x =mxx)
      }
      win.size <- paste0("window.",window[1])
      shift.dir <- paste0("angle.",atan(shift[1]/shift[2])*180/pi) # calc shift angle

      tile.dir <- dirname(tile.path)
      tile.name <- str_sub(basename(tile.path),1,-5)
      fn = paste0(tile.dir,"/", tile.basename,band.appendage, "_stat.", statistics, "_", win.size,"_",shift.dir,".tif")
      writeRaster(texture, fn, overwrite = T)
      }

          calc.texture <- function(texture.params.df,
                                   tile.dir,
                                   tile.basename) {

              texture <- mapply(named.glcm,
                                tile.dir = tile.dir,
                                tile.basename = tile.basename,
                                band.appendage = texture.params.df$band.appendage,
                                window = texture.params.df$window,
                                statistics = texture.params.df$statistics,
                                shift = texture.params.df$shift,
                                na_opt = "ignore",
                                na_val = NA)
          }

#+end_src

#+results:
*** Make new ratio bands from image
#+BEGIN_SRC R
  calc_ratios <- function(tile.path, band.names, ratio.bands, scale200 = T) {
      tile <- stack(tile.path)
      names(tile) <- band.names

      ratios <- tile[[ratio.bands,drop = F]] / sum(tile)

      if (scale200 == T) {
          ratios <- ratios * 200
      }

      tile.name <- str_sub(basename(tile.path),1,-5)
      names(ratios) <- paste0(tile.name,"_ratio.",ratio.bands)
      writeRaster(ratios, filename= paste0(dirname(tile.path),"/",names(ratios),".tif"),
                  bylayer = T, format= "GTiff", overwrite = T,
                  datatype = 'INT1U')
  }

  calc_ndvi <- function(tile.path, band.names, ndvi_appendage = "_ndvi", scale200 = T) {

      tile <- stack(tile.path)
      names(tile) <- band.names

      ndvi <- (tile[["nir"]] - tile[["red"]]) /  (tile[["nir"]] + tile[["red"]])

      ndvi [ndvi < 0] <- 0

      if (scale200 == T) {
          ndvi <- ndvi * 200
      }

      tile.dir <- dirname(tile.path)
      tile.name <- str_sub(basename(tile.path),1,-5)
      writeRaster(ndvi, filename=paste0(tile.dir,"/",tile.name,ndvi_appendage,".tif"), bylayer=TRUE,format="GTiff", overwrite = T,datatype = 'INT1U')
      return(ndvi)
  }
#+end_src

#+results:
*** Make Window/Focal Features
#+begin_src R

  ## raster.dir <- "../WholeState_DD/QualitativeAccuracy/NAIP"
  ## raster.name <- c("mad1_blue")
  ## fun <- c("mean")
  ## window.diameter <- c(1,2,4,8)
  ## feature.pattern = "_(blue|green|red|nir|ratio.blue|ratio.green|ratio.red|ratio.nir|ndvi|ratio.nir_stat\\.\\w+_window\\.3_angle\\..?\\d+|ratio.red_stat\\.\\w+_window\\.3_angle\\..?\\d+|ratio.nir_stat\\.\\w+_window\\.5_angle\\..?\\d+).tif$"

  ## feature.pattern = "_(ndvi).tif$"


  ## raster.name <- remove.tif.ext(list.files(raster.dir, feature.pattern))

  ## focal.param.df <- expand.grid(raster.dir = raster.dir,
  ##                               raster.name = raster.name,
  ##                               fun = fun,
  ##                               window.diameter = window.diameter,
  ##                               stringsAsFactors = F)


  ## make.focal.features(focal.param.df)

  make.focal.features <- function(focal.param.df) {
      mapply(focal.name.and.writeRaster, focal.param.df$raster.dir, focal.param.df$raster.name, fun = focal.param.df$fun, window.diameter = focal.param.df$window.diameter)
  }


  circular.weight <- function(rs, d) {
          nx <- 1 + 2 * floor(d/rs[1])
          ny <- 1 + 2 * floor(d/rs[2])
          m <- matrix(ncol=nx, nrow=ny)
          m[ceiling(ny/2), ceiling(nx/2)] <- 1
          if (nx == 1 & ny == 1) {
                  return(m)
          } else {
                  x <- raster(m, xmn=0, xmx=nx*rs[1], ymn=0, ymx=ny*rs[2], crs="+proj=utm +zone=1 +datum=WGS84")
                  d <- as.matrix(distance(x)) <= d
                  d / sum(d)
          }
  }


  myfocalWeight <- function(x, d, type=c('circle', 'Gauss', 'rectangle')) {
          type <- match.arg(type)
          x <- res(x)
          x <- round(x)
          if (type == 'circle') {
                  circular.weight(x, d[1])
          } else if (type == 'Gauss') {
                  if (!length(d) %in% 1:2) {
                          stop("If type=Gauss, d should be a vector of length 1 or 2")
                  }
                  .Gauss.weight(x, d)
          } else {
                  .rectangle.weight(x, d)
          }
  }



  focal.name.and.writeRaster <- function(raster.dir,raster.name, fun, window.diameter, window.shape = "circle") {
      raster.path <- str_c(raster.dir,"/",raster.name,".tif")
      r <- raster(raster.path)
      extent(r) <- round(extent(r),digits = 5)
      rs <- round(res(r))
      res(r) <- rs
      fw <- myfocalWeight(r, window.diameter, type = window.shape)
      if(fun == "min")    fw[fw==0] <- NA  # if fun is min and fw has 0's in it, the raster becomes 0's
      out <- focal(r, match.fun(fun), w = fw, na.rm = T, pad = T) * sum(fw != 0, na.rm = T)
      names(out) <- paste0(names(r), "_window",window.shape,"-",window.diameter,"_fun-",fun)
      writeRaster(out, file = str_c(raster.dir,"/",names(out),".tif"), overwrite = T, datatype = 'INT1U')
      return(out)
  }

#+end_src

#+RESULTS:

*** Make Pixel feature df
Feature DF
#+begin_src R
  save.pixel.feature.df <- function(tile.dir,
                                    tile.name,
                                    feature.pattern,
                                    feature.df.append = feature.df.appendage ) {
      s <- stack(list.files(tile.dir, pattern = paste0(tile.name,feature.pattern), full.names = T))
      names(s) <- sub(x = names(s), pattern = paste0("(",tile.name,"_)"), replacement = "")
      s.df <- as.data.frame(s, xy = T)
      saveRDS(s.df, file = paste0(tile.dir, "/", tile.name, "_Pixel",feature.df.append, ".rds"))
  }


  ## this function replaced with make.focal.features and then save.pixel.feature.df
  ##   save.pixel.feature.wWindows.df <- function(tile.dir,
  ##                                     tile.name,
  ##                                     feature.pattern,
  ##                                     feature.df.append = feature.df.appendage,
  ##                                     window.sizes = c(3,5,9),
  ##                                     sample.size = "none") {

  ##       s <- stack(list.files(tile.dir, pattern = paste0(tile.name,feature.pattern), full.names = T))

  ##       names(s) <- sub(x = names(s), pattern = paste0("(",tile.name,"_)"), replacement = "")

  ##      out <- lapply(s@layers, function(ras) {
  ##         lapply(window.sizes, function(w.s) {
  ##           mean <- focal(ras, fun = mean, w = matrix(1, nrow = w.s, ncol = w.s), na.rm = T, pad = T)
  ##           names(mean) <- paste0(names(ras),"_windowSize-",w.s,"_fun-mean")

  ##           max <- focal(ras, fun = max, w = matrix(1, nrow = w.s, ncol = w.s), na.rm = T, pad = T)
  ##           names(max) <- paste0(names(ras),"_windowSize-",w.s,"_fun-max")

  ##           min <- focal(ras, fun = min, w = matrix(1, nrow = w.s, ncol = w.s), na.rm = T, pad = T)
  ##           names(min) <- paste0(names(ras),"_windowSize-",w.s,"_fun-min")

  ## #          sd <- focal(ras, fun = sd, w = matrix(1, nrow = w.s, ncol = w.s), na.rm = T, pad = T)
  ## #         names(sd) <- paste0(names(ras),"_windowSize-",w.s,"_fun-sd")

  ##           out <- stack(mean, max, min, sd)
  ##         })
  ##       })

  ##       s.focal <- do.call("stack",unlist(out))
  ##       s <- stack(s,s.focal)
  ##       s.df <- as.data.frame(s, xy = T)

  ## if (sample.size != "none"){
  ##       s.df <- s.df[sample(1:nrow(s.df), size = max(c(sample.size,nrow(s.df)))),]
  ## }
  ##       saveRDS(s.df, file = paste0(tile.dir, "/", tile.name, "_Pixel",feature.df.append, ".rds"))
  ##   }


#+end_src

#+results:
*** Image PCA

#+BEGIN_SRC R

  pca.transformation <- function(tile.dir,
                                 image.name,
                                 tile.name,
                                 loc,
                                 feature.pattern = "_(blue|green|red|nir|ratio.blue|ratio.green|ratio.red|ratio.nir|ndvi).tif",
                                 pca.append = pca.appendage,
                                 out.image.appendage = pca.appendage,
                                 comps.to.use = c(1,2,3),
                                 pca.dir = dd.pca.dir) {

      s <- stack(list.files(tile.dir, pattern = paste0(tile.name,feature.pattern), full.names = T))
      names(s) <- sub(x = names(s), pattern = ".*_", replacement = "")

      pca.model <- readRDS(str_c(pca.dir,"/",loc,image.name,pca.append,".rds"))

      r <- predict(s, pca.model, index = comps.to.use)

      min.r <- getRasterMin(r)
      max.r <- getRasterMax(r)
      rescaled.r <- rescale.0.254(r, min.r, max.r)

      out.path <- str_c(tile.dir, "/", tile.name, out.image.appendage, ".tif")
      writeRaster(rescaled.r, filename = out.path, overwrite=TRUE, datatype = 'INT1U', bylayer = F)
  }


  getRasterMin <- function(t) {
      return(min(cellStats(t, stat = "min")))
  }

  getRasterMax <- function(t) {
      return(max(cellStats(t, stat = "max")))
  }

  rescale.0.254 <- function(raster,
                            min,
                            max) {
                                (raster - min)/(max-min) * 254
  }

  rescale.0.b <- function(raster, b, each.band = T) {
      if (each.band == T) {
          min <- cellStats(raster, stat = "min")
          max <- cellStats(raster, stat = "max")
      } else {
          min <- getRasterMin(raster)
          max <- getRasterMax(raster)
      }
      (raster - min)/(max-min) * b
  }


  ## image.pca <- function(image.name,
  ##                       pca.model.name.append = pca.model.name.appendage,
  ##                       tile.dir,
  ##                       tile.name,
  ##                       in.image.appendage = ratio.tile.name.append,
  ##                       out.image.appendage = pca.tile.name.append,
  ##                       band.names = c("blue","green","red","nir","b_ratio","g_ratio","r_ratio","n_ratio","ndvi"),
  ##                       comps.to.use = c(1,2,3),
  ##                       pca.dir = dd.pca.dir) {


  ##     out.path <- str_c(tile.dir, "/", tile.name, out.image.appendage, ".tif")

  ##     s <- stack(str_c(tile.dir, "/", tile.name, in.image.appendage,".tif"))
  ##     names(s) <- band.names

  ##     pca.model <- readRDS(str_c(pca.dir,"/",image.name,pca.model.name.append))

  ##     r <- predict(s, pca.model, index = comps.to.use)

  ##     min.r <- getRasterMin(r)
  ##     max.r <- getRasterMax(r)
  ##     rescaled.r <- rescale.0.255(r, min.r, max.r)
  ##     writeRaster(rescaled.r, filename = out.path, overwrite=TRUE, datatype = 'INT1U')
  ## }


  make.and.save.pca.transformation <- function(image.dir,
                                               image.name,
                                               location,
                                               pca.append = pca.appendage,
                                               max.sample.size = 10000,
                                               core.num = cores,
                                               feature.pattern = ".*_(blue|green|red|nir|ratio.blue|ratio.green|ratio.red|ratio.nir|ndvi).tif",
                                               ratio.appendage = ratio.tile.name.append) {

      tile.paths <- list.files(image.dir, pattern = paste0(feature.pattern), full.names = T)

      tile.names <- str_match(tile.paths,"(.*\\.[0-9]+)_.*")[,2] %>%  unique() # get the image names of pca regions

      cl <- makeCluster(cores)
      registerDoParallel(cl)

      sr <- foreach (tile.name = tile.names, .packages = c("stringr","raster"), .combine ="rbind") %dopar% {
          t.names <- str_extract(tile.paths, paste0(".*",tile.name,".*")) %>% na.omit()
          tile <- stack(t.names)
          names(tile) <- sub(x = names(tile), pattern = ".*_", replacement = "")
          samp <- sampleRandom(tile, ifelse(ncell(tile) > max.sample.size ,max.sample.size, ncell(tile)))
          colnames(samp) <- names(tile)
          samp
      }
      closeAllConnections()

                                          # Perform PCA on sample
      pca <- prcomp(sr, scale = T)
      saveRDS(pca,paste0(image.dir,"/",location,image.name,pca.append,".rds"))
      return(pca)
  }



  make.and.save.pca.transformation.wholestate <- function(image.dir,
                                                          image.name,
                                                          location,
                                                          pca.append = pca.appendage,
                                                          max.sample.size = 10000,
                                                          core.num = cores,
                                                          feature.pattern = ".*_(blue|green|red|nir|ratio.blue|ratio.green|ratio.red|ratio.nir|ndvi).tif",
                                                          Recurs = F) {
                                          #                                               ratio.append = ratio.appendage) {

      tile.paths <- list.files(image.dir, pattern = feature.pattern, full.names = T, recursive = Recurs)

      tile.names <- str_match(tile.paths,"(.*)_.*")[,2] %>%  unique() # get the image names of pca regions

      cl <- makeCluster(cores)
      registerDoParallel(cl)

      sr <- foreach (tile.name = tile.names, .packages = c("stringr","raster"), .combine ="rbind") %dopar% {
          t.names <- str_extract(tile.paths, paste0(".*",tile.name,"_.*")) %>% na.omit()
          tile <- stack(t.names)
          names(tile) <- sub(x = names(tile), pattern = ".*_", replacement = "")
          samp <- sampleRandom(tile, ifelse(ncell(tile) > max.sample.size ,max.sample.size, ncell(tile)))
          colnames(samp) <- names(tile)
          samp
      }
      closeAllConnections()

                                          # Perform PCA on sample
      pca <- prcomp(sr, scale = T)
      saveRDS(pca,paste0(image.dir,"/",location,image.name,pca.append,".rds"))
      return(pca)
  }


  ## make.and.save.pca.transformation <- function(image.dir,
  ##                                              image.name,
  ##                                              pca.model.name.append = "_pca.rds",
  ##                                              max.sample.size = 10000,
  ##                                              core.num = cores,
  ##                                              band.names = c("blue","green","red","nir","b_ratio","g_ratio","r_ratio","n_ratio","ndvi"),
  ##                                              ratio.appendage = ratio.tile.name.append) {
  ##     tile.paths <- list.files(str_c(image.dir), pattern = paste0("*",ratio.appendage), full.names = T)

  ##     tile.names <- basename(tile.paths)

  ##     cl <- makeCluster(core.num)
  ##     registerDoParallel(cl)

  ##     sr <- foreach (i = seq_along(tile.names), .packages = c("raster"), .combine ="rbind") %dopar% {
  ##         tile <- stack(tile.paths[i])
  ##         s <- sampleRandom(tile, ifelse(ncell(tile) > max.sample.size ,max.sample.size, ncell(tile)))
  ##     }

  ##     colnames(sr) <- band.names

  ##                                         # Perform PCA on sample
  ##     pca <- prcomp(sr, scale = T)
  ##     saveRDS(pca,paste0(image.dir,"/",image.name,pca.model.name.append))

  ##     return(pca)
  ## }


  image.pca.forWholeState <- function(pca.model.name.append = pca.model.name.appendage,
                                      tile.dir,
                                      tile.name,
                                      in.image.appendage = ratio.tile.name.append,
                                      out.image.appendage = pca.tile.name.append,
                                      band.names = c("blue","green","red","nir","b_ratio","g_ratio","r_ratio","n_ratio","ndvi"),
                                      comps.to.use = c(1,2,3),
                                      pca.transform) {


      out.path <- str_c(tile.dir, "/", tile.name, out.image.appendage, ".tif")

      s <- stack(str_c(tile.dir, "/", tile.name, in.image.appendage,".tif"))
      names(s) <- band.names

      r <- predict(s, pca.transform, index = comps.to.use)

      min.r <- getRasterMin(r)
      max.r <- getRasterMax(r)
      rescaled.r <- rescale.0.254(r, min.r, max.r)
      writeRaster(rescaled.r, filename = out.path, overwrite=TRUE, datatype = 'INT1U')
  }



  ## image.dir <- image.cropped.to.training.dir
  ## image.name <- 9
  ##                         in.image.appendage = ratio.tile.name.append
  ##                         out.image.appendage = pca.tile.name.append
  ##                         band.names = c("blue","green","red","nir","b_ratio","g_ratio","r_ratio","n_ratio","ndvi")
  ##                         max.sample.size = 10000
  ##                         comps.to.use = c(1,2,3)

  ##       out.path <- str_c(image.dir, "/", image.name, out.image.appendage, ".tif")

  ##       s <- stack(str_c(image.dir, "/", image.name, in.image.appendage,".tif"))
  ##       names(s) <- band.names

  ##       sr <- sampleRandom(s, ifelse(ncell(s) > max.sample.size, max.sample.size, ncell(s)))
  ##       pca <- prcomp(sr, scale = T)

  ##       r <- predict(s, pca, index = comps.to.use)

  ##       min.r <- getRasterMin(r)
  ##       max.r <- getRasterMax(r)
  ##       rescaled.r <- rescale.0.255(r, min.r, max.r)
  ##       writeRaster(rescaled.r, filename = out.path, overwrite=TRUE, datatype = 'INT1U')









                                          # Function takes raster stack, samples data, performs pca and returns stack of first n_pcomp bands
  ## predict_pca_wSampling_parallel <- function(stack, sampleNumber, n_pcomp, nCores = detectCores()-1) {
  ##     sr <- sampleRandom(stack,sampleNumber)
  ##     pca <- prcomp(sr, scale=T)
  ##     beginCluster()
  ##     r <- clusterR(stack, predict, args = list(pca, index = 1:n_pcomp))
  ##     endCluster()
  ##     return(r)
  ## }
#+END_SRC

#+RESULTS:
*** Segment image
This simply is a wrapper for the python script which is basically a
wrapper for slic.

#+begin_src R
  segment.multiple <- function(tile.dir,
                               tile.name,
                               image.name,
                               segment.params.df,
                               krusty  = T) {
      segments <- mapply(segment,
                         tile.dir = tile.dir,
                         image.name = image.name,
                         tile.name = tile.name,
                         compactness = segment.params.df$compactness,
                         segment.size = segment.params.df$segment.size,
                         krusty = krusty)
  }

  segment  <- function(tile.dir,
                       image.name,
                       tile.name,
                       compactness,
                       segment.size,
                       krusty = T) {
      pixel_size <- ifelse(image.name == "NAIP", 1, 1.5)
      compactness <- if(image.name == "NAIP") compactness else round(2/3*compactness)
      if (krusty == T) {
          system(paste("/home/erker/.conda/envs/utc/bin/python","fia_segment_cmdArgs.py",pixel_size,segment.size,compactness,tile.name,tile.dir))
      } else {
          system(paste("python","fia_segment_cmdArgs.py",pixel_size,segment.size,compactness,tile.name,tile.dir))
      }
  }
#+end_src

#+results:
*** add.features

#+begin_src R
  add.features <- function(tile.dir,
                           tile.name,
                           band.names,
                           ndvi = T,
                           ratio.bands,
                           texture = T,
                           texture.params.df) {

      til.path <- paste0(tile.dir,"/",tile.name,".tif")
      til <- stack(til.path)
      names(til) <- band.names

      save_each_band(tile.path = til.path,
                     band.names = band.names)

      if (ndvi == T) {
          calc_ndvi(tile.path = til.path,
                    band.names = band.names)
      }

      if (length(ratio.bands > 0)) {
          calc_ratios(tile.path = til.path,
                      band.names = band.names,
                      ratio.bands = ratio.bands)
      }

      if (texture == T) {
          calc.texture(texture.params.df = texture.params.df,
                       tile.dir = tile.dir,
                       tile.basename = tile.name)
      }
  }

#+end_src

#+results:
*** segment Feature DF
#+begin_src R
  make.segment.feature.df.foreach.segmentation <- function(tile.dir,
                                                           tile.name,
                                                           feature.pattern,
                                                           segmentation.pattern = "_N-[0-9]+_C-[0-9]+.*") {

      segmentation.files <-  list.files(tile.dir, pattern = paste0(tile.name,segmentation.pattern))
      segmentation.param.appendages <- str_match(segmentation.files,paste0(tile.name,"(_.*).tif"))[,2] %>% na.omit()


      out <- lapply(X = segmentation.param.appendages, FUN = function(segmentation.param.appendage) {
          make.segment.feature.df(tile.dir = tile.dir,
                                  tile.name = tile.name,
                                  segmentation.param.appendage = segmentation.param.appendage,
                                  fea.pattern = feature.pattern)
      })

  }


  make.segment.feature.df <- function(tile.dir,
                                      tile.name,
                                      segmentation.param.appendage,
                                      fea.pattern,
                                      feature.df.append = feature.df.appendage) {

      fea <- stack(list.files(tile.dir, pattern = paste0(tile.name,fea.pattern), full.names = T))
                                          #      names(fea) <- sub(x = names(fea), pattern = "(madisonNAIP|madisonPanshpSPOT|urbanExtent|wausauNAIP).*?_", replacement = "")
      names(fea) <- sub(x = names(fea), pattern = "(.*?)_", replacement = "")
      seg.path <- paste0(tile.dir,"/",tile.name,segmentation.param.appendage, ".tif")
      seg <- raster(seg.path)

                                          # Create a data_frame where mean and variances are calculated by zone
      x <- as.data.frame(fea, xy = T)
      s <- as.data.frame(seg)
      colnames(s) <- "segment"
      r <- bind_cols(x,s)
      r2 <- r %>%
          group_by(segment)

      mean.max.min.and.sd <- r2 %>%
          summarize_each(funs(mean(.,na.rm = T), sd(., na.rm = T), max(., na.rm = T), min(., na.rm = T))) %>%
          select(-x_mean, -x_sd, -y_mean, -y_sd, -x_max, -x_min, -y_max, -y_min)

      tile.name.df = data.frame(tile.name = rep(tile.name, nrow(mean.max.min.and.sd)))

      out <- bind_cols(mean.max.min.and.sd, tile.name.df)


      names <- colnames(out)
      names <- str_replace(names, "\\(",".")
      names <- str_replace(names, "\\)",".")
      names <- str_replace(names, "\\:",".")
      colnames(out) <- names
      saveRDS(out, file = paste0(tile.dir,"/",tile.name,segmentation.param.appendage,feature.df.append,".rds"))
      out
  }



                                          #  make.segment.feature.df(dd.training.dir, "madisonNAIP.1", segmentation.param.appendage = "_N-100_C-10", feature.pattern = feature.pattern)

#+end_src

#+results:

*** make.feature.df
#+begin_src R

  make.feature.df <- function(tile.dir,
                              image.name,
                              tile.name,
                              band.names,
                              ndvi = T,
                              ratio.bands,
                              texture = T,
                              texture.params.df,
                              feature.pattern = "_(blue.*|green.*|red.*|nir.*|ratio.blue.*|ratio.green.*|ratio.red.*|ratio.nir.*|ndvi.*|ratio.red_stat\\.\\w+_window\\.\\d+_angle\\..?\\d+|ratio.nir_stat\\.\\w+_window\\.\\d+_angle\\..?\\d+).tif",
                              focal.features = T,
                              focal.params.df,
                              pixel.df,
                                          #                              pca.features = c("blue","green","red","nir","ndvi","ratio.blue","ratio.green","ratio.red","ratio.nir"),
                              pca.features = c("red","green","blue","nir"),
                              pca.location,
                              pca.directory = dd.pca.dir,
                              segmentation = T,
                              segment.params.df,
                              using.krusty = T) {

      add.features(tile.dir,
                   tile.name,
                   band.names,
                   ndvi = T,
                   ratio.bands,
                   texture = T,
                   texture.params.df)

      if (focal.features == T) {
          make.focal.features(focal.params.df)
      }


      message ( tile.name,"features added")

      if (pixel.df ==T) {

          save.pixel.feature.df(tile.dir = tile.dir,
                                tile.name = tile.name,
                                feature.pattern)}

      message("pixel feature df saved")

      if (segmentation == T) {

          pca.transformation(tile.dir = tile.dir,
                             tile.name = tile.name,
                             image.name = image.name,
                             loc = pca.location,
                             pca.dir = pca.directory)

          message("pca done")

          segment.multiple(tile.dir = tile.dir,
                           tile.name = tile.name,
                           image.name = image.name,
                           segment.params.df = segment.params.df,
                           krusty = using.krusty)

          message("segmentation done")

          make.segment.feature.df.foreach.segmentation(tile.dir = tile.dir,
                                                       tile.name = tile.name,
                                                       feature.pattern = feature.pattern)}



  }


#+end_src

#+results:

** remove tif ext
#+begin_src R
  remove.tif.ext <- function(x) {
      str_match(x, "(.*).tif")[,2]
  }

#+end_src

#+RESULTS:

* data
** image
#+begin_src R
r <- stack("data/image/m_4409047_ne_15_1_20130701.tif")
#+end_src

#+RESULTS:
** training
#+begin_src R
s <- shapefile("data/training/Sandhill_training_data_new.shp")
s <- spTransform(s, proj4string(r))
#+end_src

#+RESULTS:

* crop image to subset of training
#+begin_src R
rc <- crop(r, extent(s))
writeRaster(rc, "data/image/train/m_4409047_ne_15_1_20130701_train.tif", overwrite = T)
#+end_src

#+RESULTS:

#+begin_src R :exports results :results graphics :file figs/train.png
plotRGB(rc, 1,2,3)
plot(s, add = T)
#+end_src

#+RESULTS:
[[file:figs/train.png]]

* add some additional features/layers

#+begin_src R

    add.features(tile.dir = "data/image/train/",
                 tile.name = "m_4409047_ne_15_1_20130701_train",
                 band.names = c("red","green","blue","nir"),
                 ratio.bands = c("red","green","blue","nir"),
                 texture = F,
                 texture.params.df = texture.params)

#+end_src

#+RESULTS:


#+begin_src R
  library(parallel)
    library(doParallel)
  cores <- detectCores() - 1

    cl <- makeCluster(cores)
    registerDoParallel(cl)

    focal.feature.pattern = "_(blue|green|red|nir|ratio.blue|ratio.green|ratio.red|ratio.nir|ndvi).tif$"
    focal.fun <- c("mean","max","min")
    focal.window.diameter <- c(1,2,4,8,11)

    tile.names <- remove.tif.ext(list.files("data/image/train", focal.feature.pattern))

    focal.param.df <- expand.grid(raster.dir = "data/image/train/",
                                  raster.name = tile.names,
                                  fun = focal.fun,
                                  window.diameter = focal.window.diameter,
                                  stringsAsFactors = F)

        features <- foreach (i = 1:nrow(focal.param.df),
                             .packages = c("raster","stringr")) %dopar% {
                                 make.focal.features(focal.param.df[i,])
                             }

#+end_src

#+RESULTS:

* stack training
#+begin_src R
train.stack <- stack(list.files("data/image/train", full.names = T, pattern = ".*train_.*.tif$"))
#+end_src

#+RESULTS:
* extract values at training areas
These pngs come from gimp.
#+begin_src R
snag <- raster("data/training/snags.png")
other <- raster("data/training/other.png")
livetree <- raster("data/training/livetree.png")
liveveg <- raster("data/training/liveveg.png")

#+end_src

#+RESULTS:

#+begin_src R
    snag.cells <- which(getValues(snag == 255))
    snag.df <- data.frame(cell = snag.cells, Class = "snag")

    liveveg.cells <- sample(which(getValues(liveveg == 255)),20000)
    liveveg.df <- data.frame(cell = liveveg.cells, Class = "liveveg")

    livetree.cells <- sample(which(getValues(livetree == 255)),20000)
    livetree.df <- data.frame(cell = livetree.cells, Class = "livetree")

    other.cells <- sample(which(getValues(other == 255)),17000)
    other.df <- data.frame(cell = other.cells, Class = "other")

  ext_ID <- do.call("bind", list(snag.df, liveveg.df, livetree.df, other.df))
#+end_src

#+RESULTS:

#+begin_src R :eval yes

  mat <- ff(vmode="integer",dim=c(ncell(train.stack),nlayers(train.stack)),filename="data/image/train/trainstack.ffdata")

  for(i in 1:nlayers(train.stack)){
      mat[,i] <- train.stack[[i]][]
  }

  save(mat,file="data/image/train/train_stack_mat.RData")

#+end_src

#+RESULTS:

#+begin_src R
  extracted.values <- mat[ext_ID$cell,]

  df <- data.frame(extracted.values)
  colnames(df) <- paste0("X",str_match(names(train.stack), "train(.*)")[,2])

  df$Class <- factor(ext_ID$Class)
#+end_src

#+RESULTS:

#+begin_src R
saveRDS(df, "data/training/model_building_df.rds")
#+end_src

#+RESULTS:

* build model
#+begin_src R

df <- readRDS("data/training/model_building_df.rds")

#+end_src

#+RESULTS:

#+begin_src R
df <- df[,!grepl(".*stat.*",colnames(df))]
#+end_src

#+RESULTS:

#+begin_src R
df <- df %>% na.omit()
#+end_src

#+RESULTS:

#+begin_src R
#mod_all <- randomForest(y = factor(df$Class), x= df[,1:(dim(df)[2]-1)])
#+end_src

#+RESULTS:

snag specific model to identify the features most important for
distinguishing snags
#+begin_src R
sdf <- df %>% mutate(Class = ifelse(Class == "snag", 1, 0))
snag_mod <- randomForest(y = factor(sdf$Class), x= sdf[,1:(dim(sdf)[2]-1)])
#+end_src

#+RESULTS:

#+begin_src R
top <- arrange(data.frame(importance(snag_mod), name = row.names(importance(snag_mod))), -MeanDecreaseGini) %>% head(80)
top
#+end_src

#+RESULTS:
#+begin_example
   MeanDecreaseGini                                   name
1         20.934210          X_blue_windowcircle.2_fun.max
2         20.154250          X_blue_windowcircle.1_fun.max
3         19.892082   X_ratio.nir_windowcircle.11_fun.mean
4         18.230393        X_ndvi_windowcircle.11_fun.mean
5         16.306155          X_nir_windowcircle.1_fun.mean
6         14.407922           X_red_windowcircle.2_fun.max
7         14.236415          X_nir_windowcircle.2_fun.mean
8         14.190396                                  X_nir
9         13.892251          X_nir_windowcircle.11_fun.min
10        13.654077 X_ratio.green_windowcircle.11_fun.mean
11        13.383842     X_ratio.nir_windowcircle.2_fun.min
12        13.238273          X_ndvi_windowcircle.2_fun.min
13        13.173787  X_ratio.green_windowcircle.11_fun.min
14        12.822989          X_blue_windowcircle.4_fun.max
15        12.382587   X_ratio.blue_windowcircle.4_fun.mean
16        11.943044         X_green_windowcircle.4_fun.max
17        11.922076   X_ratio.green_windowcircle.8_fun.max
18        11.909883    X_ratio.nir_windowcircle.11_fun.min
19        11.718778   X_ratio.red_windowcircle.11_fun.mean
20        11.379808        X_green_windowcircle.11_fun.max
21        11.115894    X_ratio.blue_windowcircle.2_fun.min
22        11.061737         X_blue_windowcircle.2_fun.mean
23        10.908098         X_ndvi_windowcircle.11_fun.max
24        10.830653         X_green_windowcircle.8_fun.max
25        10.730215         X_ndvi_windowcircle.11_fun.min
26        10.655074           X_red_windowcircle.4_fun.max
27        10.426834          X_ndvi_windowcircle.8_fun.min
28        10.111627           X_nir_windowcircle.8_fun.min
29        10.095013           X_nir_windowcircle.4_fun.min
30        10.003497     X_ratio.red_windowcircle.2_fun.max
31         9.998129           X_nir_windowcircle.1_fun.max
32         9.751185           X_nir_windowcircle.2_fun.min
33         9.609052         X_blue_windowcircle.1_fun.mean
34         9.523554          X_ndvi_windowcircle.8_fun.max
35         9.436292   X_ratio.green_windowcircle.8_fun.min
36         9.434640           X_nir_windowcircle.1_fun.min
37         9.387856    X_ratio.red_windowcircle.11_fun.max
38         9.361492   X_ratio.blue_windowcircle.2_fun.mean
39         9.356199          X_red_windowcircle.11_fun.max
40         9.319401         X_blue_windowcircle.11_fun.max
41         9.229489       X_green_windowcircle.11_fun.mean
42         9.180608          X_blue_windowcircle.8_fun.max
43         9.140975          X_ndvi_windowcircle.4_fun.min
44         9.065862   X_ratio.green_windowcircle.4_fun.max
45         8.917903         X_green_windowcircle.2_fun.max
46         8.896712          X_nir_windowcircle.4_fun.mean
47         8.580505           X_red_windowcircle.8_fun.max
48         8.530114     X_ratio.nir_windowcircle.8_fun.min
49         8.495866     X_ratio.red_windowcircle.8_fun.max
50         8.433684         X_red_windowcircle.11_fun.mean
51         8.212064    X_ratio.nir_windowcircle.8_fun.mean
52         7.739370     X_ratio.nir_windowcircle.8_fun.max
53         7.686223    X_ratio.red_windowcircle.11_fun.min
54         7.558443  X_ratio.green_windowcircle.8_fun.mean
55         7.476459    X_ratio.blue_windowcircle.1_fun.min
56         7.287857         X_blue_windowcircle.4_fun.mean
57         7.095130          X_ndvi_windowcircle.1_fun.min
58         7.041151         X_ndvi_windowcircle.8_fun.mean
59         6.786835           X_red_windowcircle.1_fun.max
60         6.775503  X_ratio.green_windowcircle.11_fun.max
61         6.717010    X_ratio.nir_windowcircle.11_fun.max
62         6.697940          X_red_windowcircle.11_fun.min
63         6.606683          X_ndvi_windowcircle.4_fun.max
64         6.585115                                 X_blue
65         6.168214          X_nir_windowcircle.8_fun.mean
66         6.106405     X_ratio.red_windowcircle.1_fun.max
67         6.055787     X_ratio.nir_windowcircle.4_fun.max
68         6.036748   X_ratio.blue_windowcircle.1_fun.mean
69         5.879075        X_green_windowcircle.8_fun.mean
70         5.850891         X_nir_windowcircle.11_fun.mean
71         5.827151     X_ratio.nir_windowcircle.4_fun.min
72         5.776926          X_blue_windowcircle.1_fun.min
73         5.681350         X_green_windowcircle.1_fun.max
74         5.661737     X_ratio.nir_windowcircle.1_fun.min
75         5.538270    X_ratio.red_windowcircle.8_fun.mean
76         5.454602          X_blue_windowcircle.2_fun.min
77         5.292482         X_green_windowcircle.8_fun.min
78         5.270893                           X_ratio.blue
79         5.266062     X_ratio.red_windowcircle.4_fun.max
80         5.054676    X_ratio.blue_windowcircle.1_fun.max
#+end_example



build model with top variables
#+begin_src R
mod <- randomForest(y = factor(df$Class), x= df[,c(as.character(top$name), "X_ratio.red","X_blue", "X_red")])
#+end_src

#+RESULTS:


* predict onto raster
#+begin_src R
names(train.stack.int) <- paste0("X",str_match(names(train.stack.int), "train(.*)")[,2])
pred.r <- raster::predict(train.stack.int, mod)
#+end_src

#+RESULTS:

#+begin_src R
writeRaster(pred.r, "data/image/prediction/prediction.tif",overwrite = T)
#+end_src

#+RESULTS:

#+begin_src R :exports results :results graphics :file figs/prediction_newer.png
plot(pred.r)
#+end_src

#+RESULTS:
[[file:figs/prediction_newer.png]]




[[file:figs/prediction.png]]

* test raster
** make test raster
#+begin_src R
  plot(s)
  e2 <- drawExtent()
#+end_src

#+begin_src R
dput(e2)
#+end_src

#+RESULTS:
: new("Extent"
:     , xmin = 728329.29711889
:     , xmax = 728630.128306831
:     , ymin = 4911115.04515934
:     , ymax = 4911376.10494422
: )

#+begin_src R
r.test <- crop(r, e2)

#+end_src

#+RESULTS:

#+begin_src R :exports results :results graphics :file figs/test.png
plotRGB(r.test,1,2,3)
#+end_src

#+RESULTS:
[[file:figs/test.png]]
#+begin_src R
writeRaster(r.test, "data/image/test/test.tif")
#+end_src

#+RESULTS:
** add some additional features/layers

#+begin_src R

  add.features(tile.dir = "data/image/test/",
               tile.name = "test",
               band.names = c("red","green","blue","nir"),
               ratio.bands = c("red","green","blue","nir"),
               texture = T,
               texture.params.df = texture.params)

#+end_src

#+RESULTS:


#+begin_src R

  cores <- detectCores() - 1

    cl <- makeCluster(cores)
    registerDoParallel(cl)

    focal.feature.pattern = "_(blue|green|red|nir|ratio.blue|ratio.green|ratio.red|ratio.nir|ndvi).tif$"
    focal.fun <- c("mean","max","min")
    focal.window.diameter <- c(1,2,4,8,11)

    tile.names <- remove.tif.ext(list.files("data/image/test", focal.feature.pattern))

    focal.param.df <- expand.grid(raster.dir = "data/image/test/",
                                  raster.name = tile.names,
                                  fun = focal.fun,
                                  window.diameter = focal.window.diameter,
                                  stringsAsFactors = F)

        features <- foreach (i = 1:nrow(focal.param.df),
                             .packages = c("raster","stringr")) %dopar% {
                                 make.focal.features(focal.param.df[i,])
                             }

#+end_src

** convert to integer
*** stretch
#+begin_src R
test.stack <- stack(list.files("data/image/test", full.names = T, pattern = "test_.*.tif$"))
names(test.stack) <- str_match(names(test.stack), "test(.*)")[,2]
#+end_src

#+RESULTS:

#+begin_src R
      dir.create("data/image/test/int/")
      stretch.vals <- read.csv("data/training/stretchvals.csv")

        test.stack.int <- lapply(1:nlayers(test.stack), function(i) {
            nm <- names(test.stack[[i]])
            j <- which(stretch.vals[,"nms"] == nm)
            mn <- stretch.vals[j,1]
            mx <- stretch.vals[j,2]
            if (cellStats(test.stack[[i]], "min") < mn) {
                test.stack[[i]][test.stack[[i]] < mn] <- mn
            }
            if (cellStats(test.stack[[i]], "max") > mx) {
                test.stack[[i]][test.stack[[i]] > mx] <- mx
            }


            calc(test.stack[[i]], fun=function(x){((x - mn) * 254)/(mx- mn) + 0},
                 filename = paste0("data/image/test/int/",names(test.stack[[i]]),".tif"), datatype='INT1U', overwrite = T)
        })

#+end_src

#+RESULTS:
: Warning message:
: In dir.create("data/image/test/int/") :
:   'data/image/test/int' already exists

#+begin_src R
test.stack.int <- stack(list.files("data/image/test/int", full.names = T, pattern = ".*.tif$"))
#+end_src

#+RESULTS:

** predict on test raster

#+RESULTS:

#+begin_src R
pred.test <- predict(test.stack.int, mod)
#+end_src

#+RESULTS:

#+begin_src R :exports results :results graphics :file figs/pred_test.png
plot(pred.test)
#+end_src

#+RESULTS:
[[file:figs/pred_test.png]]

#+begin_src R
writeRaster(pred.test, "data/image/test/prediction.tif", overwrite = T, dataType = "INT1U")
#+end_src

#+RESULTS:
* Apply Model to NAIP images Cropped to 2km within MYSE captures
** read points

#+begin_src R
    library(readxl)
    library(sp)
    library(rgeos)
    library(maptools)
    library(dplyr)
    library(raster)
    d <- read_excel("data/NAIPImages/MYSE_captures_2014.xlsx")
    coordinates(d) <- ~long + lat
    proj4string(d) <- CRS("+init=epsg:4326")

    utms <- c("15","16")
    bufs <- lapply(utms, function(utm) {
        p <- spTransform(d, CRS(paste0("+init=epsg:269",utm)))
        buf <- gBuffer(p, width = 2000, byid = T)
        buf <- gUnion(buf, buf)
        buf <- disaggregate(buf)
        buf
})
names(bufs) <- c("utm15","utm16")
shapefile(bufs$utm15, "data/NAIPImages/MYSE_captures_2014_utm15.shp", overwrite = T)
shapefile(bufs$utm16, "data/NAIPImages/MYSE_captures_2014_utm16.shp", overwrite = T)
#+end_src

#+RESULTS:
: Warning messages:
: 1: Setting row names on a tibble is deprecated. 
: 2: Setting row names on a tibble is deprecated.
** read images and crop to 2km
#+begin_src R

  image.files <- list.files("data/NAIPImages", recursive = T, full.names = T, pattern = ".*[0-9]{8}.tif$")[1:5]

  images <- lapply(image.files, function(image.file) stack(image.file))

  outdirs <- tools::file_path_sans_ext(image.files)

  sapply(outdirs, dir.create)

  extents <- lapply(images, function(i) extent(i))
  poly.extents <- lapply(extents, function(extent) as(extent, "SpatialPolygons"))
  poly.extents.merged <- do.call("bind", poly.extents)
  shapefile(poly.extents.merged, "data/NAIPImages/extents.shp", overwrite = T)
  projs <- sapply(images, function(i) proj4string(i))

  cropped.images <- lapply(1:length(projs), function(i) {

      if(grepl(".*zone=15.*", projs[i])) {
          ci <- lapply(1:length(bufs$utm15), function(j) {
              #c.out.path <- paste0(tools::file_path_sans_ext(image.files[i]),"_cropped_",j,".tif")
              m.out.path <- paste0(tools::file_path_sans_ext(image.files[i]),"/masked_",j,".tif")

              if(gIntersects(poly.extents.merged[i,], bufs$utm15[j,])) {
                  c1 <- crop(images[[i]], bufs$utm15[j,])   #, filename = c.out.path, overwrite = T)
                  m1 <- mask(c1, bufs$utm15[j,]) #, filename = m.out.path, overwrite = T)
                  t1 <- trim(m1) #, filename = m.out.path, overwrite = T)
                  writeRaster(t1, filename = m.out.path, overwrite = T, options = c("PHOTOMETRIC=RGB", "ALPHA=YES"), datatype = "INT1U")
              }
          })
      }

      if(grepl(".*zone=16.*", projs[i])) {
          ci <- lapply(1:length(bufs$utm16), function(j) {
              #c.out.path <- paste0(tools::file_path_sans_ext(image.files[i]),"_cropped_",j,".tif")
              m.out.path <- paste0(tools::file_path_sans_ext(image.files[i]),"/masked_",j,".tif")
              if(gIntersects(poly.extents.merged[i,], bufs$utm16[j,])) {
                  c1 <- crop(images[[i]], bufs$utm16[j,])   #, filename = c.out.path, overwrite = T)
                  m1 <- mask(c1, bufs$utm16[j,]) #, filename = m.out.path, overwrite = T)
                  t1 <- trim(m1) #, filename = m.out.path, overwrite = T)
                  writeRaster(t1, filename = m.out.path, overwrite = T, options = c("PHOTOMETRIC=RGB", "ALPHA=YES"), datatype = "INT1U")
              }
          })
      }
  })
#+end_src

** save those cropped as readable tifs
#+begin_src R
      library(raster)
      library(tiff)
        image.files <- list.files("data/NAIPImages", recursive = T, full.names = T, pattern = ".*[0-9]{8}_masked_[0-9]+.tif$")

  lapply(image.files, function(i) {
      a <- brick(i)
      out <- paste0(tools::file_path_sans_ext(i),"int.tif")
      writeRaster(a, out, options = c("PHOTOMETRIC=RGB", "ALPHA=YES"), datatype = "INT1U", overwrite = T)
  })

#+end_src

#+RESULTS:
: Error in .local(.Object, ...) :

** add some additional features/layers

#+begin_src R

    tile.dirs <- list.dirs("data/NAIPImages/")[-1]

    lapply(tile.dirs, function(tile.dir) {
        tile.names <- tools::file_path_sans_ext(list.files(tile.dir, pattern = ".*_masked_[0-9]+.tif$"))
      lapply(tile.names, function(tile.name) {

          add.features(tile.dir = tile.dir,
                       tile.name = tile.name,
                       band.names = c("red","green","blue","nir"),
                       ratio.bands = c("red","green","blue","nir"),
                       texture = F,
                       texture.params.df = texture.params)
  })
  })
#+end_src


#+begin_src R
  cores <- 2

  tile.dirs <- list.dirs("data/NAIPImages/")[-1]

  tile.dirs <- tile.dirs[1]

  lapply(tile.dirs, function(tile.dir) {
      tile.names <- tools::file_path_sans_ext(list.files(tile.dir, pattern = ".*_masked_[0-9]+.tif$"))
      lapply(tile.names, function(tile.name) {
                                          #          cl <- makeCluster(cores)
                                          #         registerDoParallel(cl)

          ## focal.feature.pattern = "_(blue|green|red|nir|ratio.blue|ratio.green|ratio.red|ratio.nir|ndvi).tif$"
          ## focal.fun <- c("mean","max","min")
          ## focal.window.diameter <- c(1,2,4,8,11)
          ## names <- remove.tif.ext(list.files(tile.dir, paste0(tile.name,focal.feature.pattern)))
          ## focal.param.df <- expand.grid(raster.dir = tile.dir,
          ##                               raster.name = names,
          ##                               fun = focal.fun,
          ##                               window.diameter = focal.window.diameter,
          ##                               stringsAsFactors = F)

                                          # only generating the top additional features

          funs <- str_match(as.character(top$name), "fun.([a-z]+)")[,2] %>% na.omit()
          windows <-str_match(as.character(top$name), "windowcircle.([0-9]+)")[,2] %>% as.numeric() %>% na.omit()
          names <- str_match(as.character(top$name), "X(_[a-z]+.[a-z]+)_window")[,2] %>% na.omit()
          names <- paste0(tile.name, names)

          focal.param.df <- data.frame(raster.dir = tile.dir,
                                       raster.name = names,
                                       fun = funs,
                                       window.diameter = windows,
                                       stringsAsFactors = F)


          features <- foreach (i = 1:nrow(focal.param.df),
                               .packages = c("raster","stringr")) %do% {
                               #.export = c('make.focal.features','focal.name.and.writeRaster','myfocalWeight','circular.weight')
                                   make.focal.features(focal.param.df[i,])
                               }
      })
  })
#+end_src

#+RESULTS:
: Error in stri_match_first_regex(string, pattern, opts_regex = opts(pattern)) : 
:   object 'top' not found


** predict onto cropped images
