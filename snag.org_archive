#    -*- mode: org -*-


Archived entries from file /home/erker/projects/snag/snag.org


* extract values at training polygons
  :PROPERTIES:
  :ARCHIVE_TIME: 2018-06-07 Thu 13:37
  :ARCHIVE_FILE: ~/projects/snag/snag.org
  :ARCHIVE_CATEGORY: snag
  :END:

#+begin_src R
train.stack.int <- stack(list.files("data/image/train/int", full.names = T, pattern = ".*.tif$"))
#+end_src

#+RESULTS:

#+begin_src R

  mat <- ff(vmode="integer",dim=c(ncell(train.stack),nlayers(train.stack)),filename="data/image/train/trainstack.ffdata")

  for(i in 1:nlayers(train.stack.int)){
      mat[,i] <- train.stack.int[[i]][]
  }

  save(mat,file="data/image/train/train_stack_mat.RData")

  ID_Raster <- raster(train.stack.int[[1]])
  ID_Raster[] <- 1:ncell(train.stack.int[[1]])
#+end_src

#+RESULTS:

#+begin_src R
  ext_ID <- extract(ID_Raster, s, df = T)
  s@data$ID <- 1:length(s)
  ext_ID <- left_join(ext_ID, s@data)

  extracted.values <- mat[as.numeric(ext_ID$layer),]

  df <- data.frame(extracted.values)
  colnames(df) <- paste0("X",str_match(names(train.stack), "train(.*)")[,2])

  df$Class <- factor(ext_ID$Class)
#+end_src

#+RESULTS:
: Joining, by = "ID"

#+begin_src R
saveRDS(df, "data/training/model_building_df.rds")
#+end_src

#+RESULTS:


Archived entries from file /home/erker/projects/snag/snag.org


* old extract
  :PROPERTIES:
  :ARCHIVE_TIME: 2018-06-07 Thu 13:37
  :ARCHIVE_FILE: ~/projects/snag/snag.org
  :ARCHIVE_OLPATH: extract values at training areas
  :ARCHIVE_CATEGORY: snag
  :END:

This is slow and inefficient

#+begin_src R
  train.stack.int <- stack(list.files("data/image/train/int", full.names = T, pattern = ".*.tif$"))

  snag.df <- extract(train.stack.int, which(getValues(snag == 255)), df = T)
  snag.df$Class <- "snag"

  liveveg.cells <- sample(which(getValues(liveveg == 255)),200)
  liveveg.df <- extract(train.stack.int, liveveg.cells, df = T)
  liveveg.df$Class <- "liveveg"

  livetree.cells <- sample(which(getValues(livetree == 255)),600)
  livetree.df <- extract(train.stack.int, livetree.cells, df = T)
  livetree.df$Class <- "livetree"

  other.cells <- sample(which(getValues(other == 255)),600)
  other.df <- extract(train.stack.int, other.cells, df = T)
  other.df$Class <- "other"

#+end_src

#+begin_src R
df <- do.call("bind", list(snag.df, liveveg.df, livetree.df, other.df))
#+end_src

#+RESULTS:

#+begin_src R
df <- select(df, -ID)
saveRDS(df, "data/training/model_building_df.rds")
#+end_src

#+RESULTS:







Archived entries from file /home/erker/projects/snag/snag.org


* old extract
  :PROPERTIES:
  :ARCHIVE_TIME: 2018-06-07 Thu 13:38
  :ARCHIVE_FILE: ~/projects/snag/snag.org
  :ARCHIVE_OLPATH: extract values at training areas
  :ARCHIVE_CATEGORY: snag
  :END:

This is slow and inefficient

#+begin_src R
  train.stack.int <- stack(list.files("data/image/train/int", full.names = T, pattern = ".*.tif$"))

  snag.df <- extract(train.stack.int, which(getValues(snag == 255)), df = T)
  snag.df$Class <- "snag"

  liveveg.cells <- sample(which(getValues(liveveg == 255)),200)
  liveveg.df <- extract(train.stack.int, liveveg.cells, df = T)
  liveveg.df$Class <- "liveveg"

  livetree.cells <- sample(which(getValues(livetree == 255)),600)
  livetree.df <- extract(train.stack.int, livetree.cells, df = T)
  livetree.df$Class <- "livetree"

  other.cells <- sample(which(getValues(other == 255)),600)
  other.df <- extract(train.stack.int, other.cells, df = T)
  other.df$Class <- "other"

#+end_src

#+begin_src R
df <- do.call("bind", list(snag.df, liveveg.df, livetree.df, other.df))
#+end_src

#+RESULTS:

#+begin_src R
df <- select(df, -ID)
saveRDS(df, "data/training/model_building_df.rds")
#+end_src

#+RESULTS:









* convert to integer
:PROPERTIES:
:ARCHIVE_TIME: 2018-08-06 Mon 13:19
:ARCHIVE_FILE: ~/git/snag/snag.org
:ARCHIVE_CATEGORY: snag
:END:
** save values to stretch the image (this will be needed to apply elsewhere)
#+BEGIN_SRC R
mns <- minValue(train.stack)
mxs <- maxValue(train.stack)
nms <- paste0("X",str_match(names(train.stack), "train(.*)")[,2])
stretch.vals <- cbind(mns,mxs,nms)
write.csv(stretch.vals, "data/training/stretchvals.csv", row.names = F)
#+END_SRC

#+RESULTS:

** stretch
#+begin_src R
  train.stack.int <- lapply(1:nlayers(train.stack), function(i) {
      mn <- stretch.vals[i,1]
      mx <- stretch.vals[i,2]
      calc(train.stack[[i]], fun=function(x){((x - mn) * 254)/(mx- mn) + 0},
           filename = paste0("data/image/train/int/",names(train.stack[[i]]),".tif"), datatype='INT1U', overwrite = T)
  })

#+end_src

#+RESULTS:

#+begin_src R
train.stack.int <- stack(list.files("data/image/train/int", full.names = T, pattern = ".*.tif$"))

#+end_src

#+begin_src R
writeRaster(train.stack.int, "data/image/train/int/stacked.tif")
#+end_src

#+RESULTS:

* old trim
:PROPERTIES:
:ARCHIVE_TIME: 2018-08-08 Wed 14:21
:ARCHIVE_FILE: ~/git/snag/snag.org
:ARCHIVE_OLPATH: Apply Model to NAIP images Cropped to 2km within MYSE captures/read images and crop to 2km
:ARCHIVE_CATEGORY: snag
:END:
Trim away NA's
#+begin_src R
  library(stringr)
  image.files <- list.files("data/NAIPImages", recursive = T, full.names = T, pattern = ".*_cropped.tif$")

  images <- lapply(image.files, function(image.file) stack(image.file))

  trimmed.images <- lapply(1:length(images), function(i) trim(images[[i]], filename = paste0(str_extract(image.files[i], ".*cropped"),"_trimmed.tif")))


#+end_src

* training
:PROPERTIES:
:ARCHIVE_TIME: 2018-10-03 Wed 10:57
:ARCHIVE_FILE: ~/git/snag/snag.org
:ARCHIVE_OLPATH: data
:ARCHIVE_CATEGORY: snag
:END:
#+begin_src R
s <- shapefile("data/training/Sandhill_training_data_new.shp")
s <- spTransform(s, proj4string(r))
#+end_src

#+RESULTS:

